import heapq

class Solution:
    def maxPoints(self, grid, queries):
        m, n = len(grid), len(grid[0])
        k = len(queries)

        # store queries with original index
        sorted_queries = sorted([(q, idx) for idx, q in enumerate(queries)])
        answer = [0] * k

        visited = [[False] * n for _ in range(m)]
        heap = []
        heapq.heappush(heap, (grid[0][0], 0, 0))
        visited[0][0] = True

        count = 0  # number of visited cells with value < current query

        directions = [(1,0), (-1,0), (0,1), (0,-1)]

        for q, idx in sorted_queries:
            # expand reachable cells whose value < q
            while heap and heap[0][0] < q:
                val, x, y = heapq.heappop(heap)
                count += 1
                for dx, dy in directions:
                    nx, ny = x+dx, y+dy
                    if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                        visited[nx][ny] = True
                        heapq.heappush(heap, (grid[nx][ny], nx, ny))
            answer[idx] = count
        
        return answer
