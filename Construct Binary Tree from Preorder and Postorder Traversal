# Definition for a binary tree node.
# class TreeNode(object):
#     def _init_(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def constructFromPrePost(self, preorder, postorder):
        """
        :type preorder: List[int]
        :type postorder: List[int]
        :rtype: Optional[TreeNode]
        """
        if not preorder:
            return None

        root = TreeNode(preorder[0])

        if len(preorder) == 1:
            return root

        left_child = preorder[1]
        left_index_postorder = postorder.index(left_child)

        left_preorder = preorder[1:left_index_postorder + 2]
        left_postorder = postorder[:left_index_postorder + 1]

        right_preorder = preorder[left_index_postorder + 2:]
        right_postorder = postorder[left_index_postorder + 1:-1]

        root.left = self.constructFromPrePost(left_preorder, left_postorder)
        root.right = self.constructFromPrePost(right_preorder, right_postorder)

        return root
