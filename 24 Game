from typing import List

class Solution:
    def judgePoint24(self, cards: List[int]) -> bool:
        EPS = 1e-6

        def dfs(nums: List[float]) -> bool:
            if len(nums) == 1:
                return abs(nums[0] - 24) < EPS

            n = len(nums)
            # pick two numbers (order-insensitive pair: i < j)
            for i in range(n):
                for j in range(i + 1, n):
                    a, b = nums[i], nums[j]
                    next_nums = [nums[k] for k in range(n) if k != i and k != j]

                    # all results using a and b
                    candidates = [a + b, a - b, b - a, a * b]
                    if abs(b) > EPS:
                        candidates.append(a / b)
                    if abs(a) > EPS:
                        candidates.append(b / a)

                    for val in candidates:
                        next_nums.append(val)
                        if dfs(next_nums):
                            return True
                        next_nums.pop()
            return False

        return dfs([float(x) for x in cards])
